{% set module_path = _self|split('\/templates') %}
{{ attach_library('it_route_trip_tools/maps-autocomplete') }}
{{ attach_library('it_route_trip_tools/initmapautocomplete-routes-stops') }}
{{ attach_library('jquery_ui_datepicker/datepicker') }}
<div class="map-frame">
	<script>
    function buildMaps() {
		{% for dir, stop_ids in route_data.stop_markers %}
		initMap_{{ dir }}();
		{% endfor %}
	}
	</script>
	<script>

    var it_bounds = {
		  north: {{ route_data.bounding.max.lat }},
		  south: {{ route_data.bounding.min.lat }},
		  west: {{ route_data.bounding.min.lng }},
		  east: {{ route_data.bounding.max.lng }},
		};
{% for dir, stop_ids in route_data.stop_markers %}
		var {{ dir }}_markers = {};
		function initMap_{{ dir }}() {
			const map = new google.maps.Map(document.getElementById("route-map-frame-{{ dir }}"), {
		   	center: {lat:{{ route_data.center.lat }}, lng:{{ route_data.center.lng }}},
		    mapTypeId: "{{ route_data.map_type }}",
			});
			{{dir}}MapBoundary(map);
			var start = {
		    path: 'M -4 -2, h 8, v 4, h -8, Z',
		    strokeColor: '#fff',
		    fillColor: '#007B5F',
		    scale: 6,
		    strokeWeight: 1,
		    fillOpacity: 1
			};
  		var end = {
		    path: 'M -4 -2, h 8, v 4, h -8, Z',
		    fillColor: '#B30000',
		    scale: 6,
		    strokeWeight: 1,
		    fillOpacity: 1,
  		};
			var timepoint = {
		    path: "M -2,0 0,-2 2,0 0,2 z",
		    scale: 4,
		    strokeWeight: 1,
		    strokeColor: "#fff",
		    fillColor: "#003087",
		    fillOpacity: 1,
  		};
  		var stop = {
  			path: google.maps.SymbolPath.CIRCLE,
  			scale: 4,
  			fillColor: '#fff',
  			fillOpacity: 1,
  			strokeWeight: 1,
  			strokeColor:'#003087'
  		};
      const events = ['mousedown', 'mousemove', 'mouseover', 'mouseout', 'mouseup',
      'mousewheel', 'DOMMouseScroll', 'touchstart', 'touchend', 'touchmove',
      'dblclick', 'contextmenu', 'click'];
      events.forEach((event) => document.getElementById("route-map-frame-{{ dir }}").addEventListener(event, (e) => {
        e.preventDefault();
        e.stopPropagation();
      }));

	{% for stop_id, stop_dataset in stop_ids %}
	    var stop_id = {{ stop_id }};
		var stop_count = {{ stop_dataset.stop_times|length }};
		{% set times_array = [] %}
		{% set sorted_times = stop_dataset.stop_times %}
		{% for time in sorted_times %}
		    {% if time != '' %}
		        {% set times_array = times_array|merge([time['departure_time']]) %}
		    {% endif %}
		{% endfor %}

		 stop_marker = {{ dir }}_markers[stop_id] ?? {
		    map: map,
		    lat: {{ stop_dataset.stop_lat }},
		    lng: {{ stop_dataset.stop_lon }},
		    title: '{{ stop_dataset.stop_id }} - {{ stop_dataset.stop_name }}',
		    times: {{ times_array|json_encode|raw }},
			stop_id: stop_id,
	  	};

		{% if stop_dataset.timepoint == 1 %}
			stop_marker.icon = timepoint;
		{% else %}
			stop_marker.icon = stop;
		{% endif %}
		{% if stop_id == route_data.first_stop[dir] %}
			stop_marker.icon = start;
			stop_marker.label = {text: 'Start', color: "white"};
		{% endif %}
		{% if stop_id == route_data.last_stop[dir] %}
			stop_marker.icon = end;
			stop_marker.label = {text: 'End', color: "white"};
		{% endif %}

	  	{{ dir }}_markers[stop_id] = stop_marker;
	{% endfor %}
	  	//Create and open InfoWindow.
  		var infoWindow = new google.maps.InfoWindow();
		var markers_array = Object.values({{ dir }}_markers);
  		for (var i = 0; i < markers_array.length; i++) {
	      var data = markers_array[i];
	      var markerLatLng = new google.maps.LatLng(data.lat, data.lng);
		  var times = data.times.map(function(time) {
			var timeParts = time.split('T')[1].split(':');
			var hours = parseInt(timeParts[0]);
			var minutes = timeParts[1];
			var period = hours >= 12 ? 'p.m.' : 'a.m.';
			hours = hours % 12 || 12;
			return hours + ':' + minutes + ' ' + period;
		  });
		  data.description = '<h3>' + data.title + '</h3><p>' + times.join(', ') + '</p>';
	      var marker = new google.maps.Marker({
          position: markerLatLng,
          map: data.map,
          title: data.title,
          icon: data.icon,
          label: data.label,
	      });
    		//Attach click event to the marker.
        (function (marker, data) {
            google.maps.event.addListener(marker, "click", function (e) {
                //Wrap the content inside an HTML DIV in order to set height and width of InfoWindow.
                infoWindow.setContent("<div style = 'width:200px;min-height:40px'>" + data.description + "</div>");
                infoWindow.open(map, marker);
            });
        })(marker, data);
      }
      {% if dir == 'inbound' %}
					const routePathCoordinates_{{ dir }}_{{ key }} = [
					{% for key,inbound_shape in route_data.inbound_shapes %}
						{lat: {{ inbound_shape.shape_pt_lat }}, lng: {{ inbound_shape.shape_pt_lon }}},
					{% endfor %}
					];
					const routePath_{{ dir }}_{{ key }}_stroker = new google.maps.Polyline({
				    path: routePathCoordinates_{{ dir }}_{{ key }},
				    geodesic: true,
				    strokeColor: '#003087',
				    strokeOpacity: 1,
				    strokeWeight: 7,
					});
					routePath_{{ dir }}_{{ key }}_stroker.setMap(map);
					const routePath_{{ dir }}_{{ key }} = new google.maps.Polyline({
				    path: routePathCoordinates_{{ dir }}_{{ key }},
				    geodesic: true,
				    strokeColor: '#FEE134',
				    strokeOpacity: 1,
				    strokeWeight: 4,
					});
					routePath_{{ dir }}_{{ key }}.setMap(map);
			{% else %}
					const routePathCoordinates_{{ dir }}_{{ key }} = [
					{% for key,outbound_shape in route_data.outbound_shapes %}
						{lat: {{ outbound_shape.shape_pt_lat }}, lng: {{ outbound_shape.shape_pt_lon }}},
					{% endfor %}
					];
					const routePath_{{ dir }}_{{ key }}_stroker = new google.maps.Polyline({
				    path: routePathCoordinates_{{ dir }}_{{ key }},
				    geodesic: true,
				    strokeColor: '#003087',
				    strokeOpacity: 1,
				    strokeWeight: 7,
					});
					routePath_{{ dir }}_{{ key }}_stroker.setMap(map);
					const routePath_{{ dir }}_{{ key }} = new google.maps.Polyline({
				    path: routePathCoordinates_{{ dir }}_{{ key }},
				    geodesic: true,
				    strokeColor: '#FEE134',
				    strokeOpacity: 1,
				    strokeWeight: 4,
					});
					routePath_{{ dir }}_{{ key }}.setMap(map);
			{% endif %}
		}
		function {{dir}}MapBoundary(map) {
			var latlng = [
				new google.maps.LatLng({{ route_data.bounding.min.lat }}, {{ route_data.bounding.min.lng }}),
				new google.maps.LatLng({{ route_data.bounding.max.lat }}, {{ route_data.bounding.max.lng }}),
			];
			var latlngbounds = new google.maps.LatLngBounds();
			for (var i = 0; i < latlng.length; i++) {
				latlngbounds.extend(latlng[i]);
			}
			map.fitBounds(latlngbounds);
		}
{% endfor %}
  </script>
{% for dir, stop_ids in route_data.stop_markers %}
	{% if dir != 'inbound' %}
		{% set dir_class = 'show-dir' %}
	{% else %}
		{% set dir_class = 'hide-dir hide' %}
	{% endif %}
	<div id="{{ dir }}-map" class="maps {{ dir_class }}">
  	<div class="panel-group" id="accordion-{{ dir }}" role="tablist" aria-multiselectable="true">
			<div class="panel panel-default {{ dir }}-panel" style="border: none !important;">
	    	<div class="panel-heading" role="tab" id="{{ dir }}-map-heading">
      		<a id="map-title" class="panel-title" style="position: relative;" role="button" data-route-id="{{ route_data.short_name }}"
            onclick="querySelector('#map-chevron span').style.transform === 'rotate(180deg)' 
                        ? querySelector('#map-chevron span').style.transform = 'rotate(0deg)' 
                        : querySelector('#map-chevron span').style.transform = 'rotate(180deg)'">
				    <span id="map-chevron" class="chevron-down" style="position: absolute; top: 0; left: 0; height: 100%; background-color: #003087; width: 53px; align-items: center; display: flex; justify-content: center; color: white; border-radius: 3px;">
              <span></span>
            </span>
        		<h4 class="{{ dir }}-route-map-toggle" style="margin-left: 50px">
      	  		Open Route {{ route_data.short_name }} Map
		        </h4>
      		</a>
	    	</div>
	    	<div id="{{ dir }}-map-body" class="panel-collapse hide">
      		<div id="route-map" class=" panel-body">
						<div tabindex="1" id="route-map-frame-{{ dir }}"></div>
					</div>
	    	</div>
			</div>
		</div>
  </div>
{% endfor %}
</div>
<div id="tripplanner-menu" name="trip-planner-menu" style="display: none !important">
	<div class="form-group">
		<label for="start_add" class="sr-only">Starting Address</label>
		<input type="text" name="start_add_id" id="start_add_id" class="hidden start-add-control" aria-hidden="true">
		<div class="start-add-container">
			<input name="start_add" id="start_add" type="text" placeholder="From" class="form-control start-add-control pac-target-input" autocomplete="off">
			<button class="address-clear btn btn-danger" id="start-add-control" type="button">X</button>
		</div>
		<div class="alert alert-danger hidden" id="start-add-alert"></div>
		<button id="locate" class="btn btn-primary col-xs-12 col-sm-12 col-md-12 col-lg-12" type="button" onclick="showPosition();">Use My Location</button>
	</div>
	<div class="form-group">
		<label for="dest_add" class="sr-only">Destination Address</label>
		<input type="text" name="dest_add_id" id="dest_add_id" class="hidden dest-add-control" aria-hidden="true">
		<div class="dest-add-container">
			<input name="dest_add" id="dest_add" type="text" placeholder="To" class="form-control dest-add-control pac-target-input" autocomplete="off">
			<button class="address-clear btn btn-danger" id="dest-add-control" type="button">X</button>
		</div>
		<div class="alert alert-danger hidden" id="dest-add-alert"></div>
	</div>
</div>