<?php

use Drupal\Component\Serialization\Json;

CONST INBOUND_DIRECTION = 1;
CONST OUTBOUND_DIRECTION = 0;

/**
 * Implements hook_theme().
 */
function it_route_trip_tools_theme($existing, $type, $theme, $path) {
  return [
    'it_route_trip_tools_legend_calendar_block_table' => [
      'variables' => [
        'headers' => NULL,
        'rows' => NULL,
      ],
      'template' => 'legend-calendar-block-table',
    ],
		'admin_form' => [
			'render element' => 'form',
			'template' => 'forms/admin-form'
		],
		'admin_form_page' => [
			'variables' => [
				'admin_form' => array()
			],
			'template' => 'pages/admin-form-page'
		],
		'stops_page' => [
			'variables' => [
				'stop_data' => array(),
				'stop_id' => ''
			],
			'template' => 'pages/stops-page'
		],
		'routes_page' => [
			'template' => 'pages/routes-page',
			'variables' => [
				'route_id' => NULL,
				'route_short_name' => NULL,
				'routes_options' => array(),
				'route_list' => array(),
				'routes_map_weekdays' => array(),
        'routes_table_weekdays' => array(),
        'route_data_weekdays' => array(),
				'all_routes_map_data' => '',
        'download_url' => '',
			],
		],
		'routes_form' => [
			'variables' => array(
				'form' => NULL,
				'route_data' => array()
			),
			'template' => 'forms/routes-form'
		],
		'routes_map' => [
			'variables' => array (
				'route_data' => array(),
        'day' => NULL,
			),
			'template' => 'components/routes-map'
		],
		'routes_table' => [
			'variables' => array (
				'route_data' => array(),
			),
			'template' => 'components/routes-table'
		],
		'trip_planner_page' => [
			'template' => 'pages/trip-planner-page',
			'variables' => [
				'trip_data' => array()
			],
		],
		'trip_form_block' => [
			'template' => 'blocks/trip-form-block',
			'variables' => [
				'trip_form' => array(),
				'trip_planner_path' => '',
			],
		],
		'stops_form_block' => [
			'template' => 'blocks/stops-form-block',
			'variables' => [
				'stops_form' => array(),
				'stop_id' => '',
				'stop_options' => array(),
				'stops_path' => ''
			],
		],
		'routes_form_block' => [
			'template' => 'blocks/routes-form-block',
			'variables' => [
				'routes_form' => array()
			],
		],
		'routes_media_block' => [
			'template' => 'blocks/routes-media-block',
			'variables' => [
				'route_id' => array(),
				'route_table_url' => '',
				'route_map_url' => ''
			],
		],
		'route_trip_tools_form_block' => [
			'template' => 'blocks/route-trip-tools-form-block',
			'variables' => [
				'trip_form_block' => NULL,
				'stops_form_block' => NULL,
				'routes_form_block' => NULL,
				'routes_media_block' => NULL,
				'route_param' => array(),
				'trip_planner_path' => '',
				'routes_path' => '',
				'stops_path' => '',
				'current_page' => '',
				'route_id' => ''
			],
		],
        /** new templates */
        'routes_header_block' => [
            'template' => 'blocks/routes-header-block',
            'variables' => [
                'routes_options' => [],
                'additional_blocks' => [
                    [
                        'title' => t('Service Alerts'),
                        'link' => [
                            'title' => 'View Alerts',
                            'mobile_title' => 'View Alerts',
                            'url' => '/rider-alerts'
                        ],
                        'color' => '#6CACDE',
                    ],
                    [
                        'title' => t('Planning a Trip?'),
                        'link' => [
                            'title' => 'Go to Trip Planner',
                            'mobile_title' => 'Trip Planner',
                            'url' => '/plan-your-trip/trip-planner'
                        ],
                        'color' => '#33957F',
                    ],
                    [
                        'title' => t('Stops and Stations'),
                        'link' => [
                            'title' => 'Find a Stop',
                            'mobile_title' => 'View Stops',
                            'url' => '/stops'
                        ],
                        'color' => '#003087',
                    ],
                ],
            ],
        ],
        'routes_new_page' => [
            'template' => 'pages/routes-new-page',
            'variables' => [
                'routes_options' => [],
                'alert_options' => [],
                'alert_view_all_link' => ''
            ],
        ]
	];
}

/*
	Implements hook_page_attachments
*/
function it_route_trip_tools_page_attachments(array &$attachments) {
	$config = \Drupal::service('config.factory')->getEditable('it_route_trip_tools.settings');
	$routes_path = $config->get('route_page_path');
	$attachments['#attached']['library'][] = 'it_route_trip_tools/global';
	$attachments['#attached']['drupalSettings']['it_route_trip_tools']['routes_path'] = $routes_path;
}

/**
 * Implements hook_theme_suggestions_alter
 */
function it_route_trip_tools_theme_suggestions_alter(array &$suggestions, array $variables) {
	if (isset($variables['element']) && isset($variables['element']['#type']) && $variables['element']['#type'] == 'form') {
		$original_theme_hook = $variables['theme_hook_original'];
		$suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#id']);
	}
	return $suggestions;
}

/**
 * Implements hook_theme_registry_alter().
 */
function it_route_trip_tools_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['node_add_list'])) {
    $theme_registry['node_add_list']['template'] = 'node-add-list--ict';
    $theme_registry['node_add_list']['theme path'] = 'modules/custom/it_route_trip_tools';
    $theme_registry['node_add_list']['path'] = 'modules/custom/it_route_trip_tools/templates';
  }
}


function it_route_trip_tools_get_min($shapes, $key) {
  $val = 999;
  foreach ($shapes as $coord) {
    if ($coord[$key] < $val) {
      $val = $coord[$key];
    }
  }
  return $val;
}

function it_route_trip_tools_get_max($shapes, $key) {
  $val = -999;
  foreach ($shapes as $coord) {
    if ($coord[$key] > $val) {
      $val = $coord[$key];
    }
  }
  return $val;
}

function it_route_trip_tools_get_center($boundaries) {
  return [
    'lat' => ((float) $boundaries['max']['lat'] + (float) $boundaries['min']['lat']) / 2,
    'lng' => ((float) $boundaries['max']['lng'] + (float) $boundaries['min']['lng']) / 2,
  ];
}

function it_route_trip_tools_get_stop_options($full = FALSE, $date = NULL) {
  $date = empty($date) ? date('Y-m-d') : $date;
  $routes_data = it_route_trip_tools_pics_get_all_routes_data($date, 0, TRUE);
  $stop_options = ['' => t('Select a stop')];
  foreach ($routes_data as $stop_data) {
    if (isset($stop_data['Route']['MapInfo']['Stops'][INBOUND_DIRECTION]) && !empty($stop_data['Route']['MapInfo']['Stops'][INBOUND_DIRECTION])) {
      foreach ($stop_data['Route']['MapInfo']['Stops'][INBOUND_DIRECTION] as $stop) {
        if ($full) {
          $stop_options[(int) $stop['stop_id']] = isset($stop_options[(int) $stop['stop_id']]) ? $stop_options[(int) $stop['stop_id']] : $stop;
          $stop_options[(int) $stop['stop_id']]['routes'] = isset($stop_options[(int) $stop['stop_id']]['routes']) ? $stop_options[(int) $stop['stop_id']]['routes'] : [];
          $stop_options[(int) $stop['stop_id']]['routes'][$stop_data['Route']['RouteInfo']['route_id']] = $stop_data['Route'];
        } else {
          $stop_options[(int) $stop['stop_id']] = $stop['stop_id'] . ' - ' . $stop['stop_name'];
        }
      }
    }
  }
  return $stop_options;
}

function it_route_trip_tools_get_stop_details($stop_id, $date = NULL) {
  $date = empty($date) ? date('Y-m-d') : $date;
  $stops = it_route_trip_tools_get_stop_options(TRUE, $date);
  if (!in_array($stop_id, array_keys($stops))) {
    return [];
  }
  $stop = $stops[$stop_id];
  $route_ids = [];
  foreach ($stop['routes'] as $route_id => $route) {
    $shape = reset($route['MapInfo']['Shapes'][INBOUND_DIRECTION]);
    $route_ids[$route['RouteInfo']['route_id']] = [
      "routeShortName" => $route['RouteInfo']['route_short_name'],
      "routeLongName" => $route['RouteInfo']['route_long_name'],
      "schedule" => [
        0 => isset($route['MapInfo']['Stops'][INBOUND_DIRECTION][$stop_id]) ? [
          'scheduleId' => '1.0',
          'stopTimes' => array_map(function ($item) {
            return isset($item['departure_time']) && !empty($item['departure_time']) ? date('H:i a', strtotime($item['departure_time'])) : '';
          }, $route['MapInfo']['Stops'][INBOUND_DIRECTION][$stop_id]['stop_times'] ?? []),
        ] : [],
        1 => isset($route['MapInfo']['Stops'][OUTBOUND_DIRECTION][$stop_id]) ? [
          'scheduleId' => '2.0',
          'stopTimes' => array_map(function ($item) {
            return isset($item['departure_time']) && !empty($item['departure_time']) ? date('H:i a', strtotime($item['departure_time'])) : '';
          }, $route['MapInfo']['Stops'][OUTBOUND_DIRECTION][$stop_id]['stop_times'] ?? []),
        ] : [],
      ],
      "shape" => [
        "shapeId" => array_keys($route['MapInfo']['Shapes'][INBOUND_DIRECTION])[0] ?? '',
        "shapeData" => array_map(function ($item) {
          return [
            "shape_pt_sequence" => $item['shape_pt_sequence'],
            "shape_pt_lat" => $item['shape_pt_lat'],
            "shape_pt_lon" => $item['shape_pt_lon'],
          ];
        }, $shape),
      ],
    ];
  }
  return [
    "stopId" => $stop_id,
    "stopName" => $stop['stop_name'],
    "stopLat" => $stop['stop_lat'],
    "stopLon" => $stop['stop_lon'],
    "timepoint" => $stop['timepoint'],
    "routes" => $route_ids,
  ];
}

/*

	The data built here is used for the map and table for a returned route.

*/
function it_route_trip_tools_get_route_table_map_data($routeId, $date = NULL) {
  $date = empty($date) ? date('Y-m-d') : $date;
  $inbound_data = it_route_trip_tools_pics_get_route_data($routeId, $date, INBOUND_DIRECTION, TRUE);
  $outbound_data = it_route_trip_tools_pics_get_route_data($routeId, $date, OUTBOUND_DIRECTION, TRUE);
  if (empty($inbound_data) || empty($outbound_data)) {
    return [];
  }
  $shapes_inbound = reset($inbound_data['Route']['MapInfo']['Shapes'][INBOUND_DIRECTION]);
  $shapes_outbound = reset($outbound_data['Route']['MapInfo']['Shapes'][OUTBOUND_DIRECTION]);
  $stop_markers_inbound = $inbound_data['Route']['MapInfo']['Stops'][INBOUND_DIRECTION];
  $stop_markers_outbound = $outbound_data['Route']['MapInfo']['Stops'][OUTBOUND_DIRECTION];
  $time_tables_inbound = $inbound_data['Route']['StopTimesTables'][INBOUND_DIRECTION];
  $time_tables_outbound = $outbound_data['Route']['StopTimesTables'][OUTBOUND_DIRECTION];
  $inbound_label = $inbound_data['Route']['Directions'][INBOUND_DIRECTION];
  $outbound_label = $outbound_data['Route']['Directions'][OUTBOUND_DIRECTION];

  $short_name = $inbound_data['Route']['RouteInfo']['route_short_name'];
  $long_name = $inbound_data['Route']['RouteInfo']['route_long_name'];

  $bounding = [
    'min' => [
      'lat' => it_route_trip_tools_get_min($shapes_inbound, 'shape_pt_lat'),
      'lng' => it_route_trip_tools_get_min($shapes_inbound, 'shape_pt_lon'),
    ],
    'max' => [
      'lat' => it_route_trip_tools_get_max($shapes_inbound, 'shape_pt_lat'),
      'lng' => it_route_trip_tools_get_max($shapes_inbound, 'shape_pt_lon'),
    ],
  ];
  $data = [
    'short_name' => $short_name,
    'long_name' => $long_name,
    'map_type' => 'roadmap',
    'bounding' => $bounding,
    'center' => it_route_trip_tools_get_center($bounding),
    'inbound_shapes' => $shapes_inbound,
    'outbound_shapes' => $shapes_outbound,
    'inbound_label' => $inbound_label,
    'outbound_label' => $outbound_label,
    'first_stop' => [
      'inbound' => reset($time_tables_inbound)['stop_id'] ?? '',
      'outbound' => reset($time_tables_outbound)['stop_id'] ?? '',
    ],
    'last_stop' => [
      'inbound' => end($time_tables_inbound)['stop_id'] ?? '',
      'outbound' => end($time_tables_outbound)['stop_id'] ?? '',
    ],
    'stop_markers' => [
      'inbound' => $stop_markers_inbound,
      'outbound' => $stop_markers_outbound,
    ],
    'time_tables' => [
      'inbound' => it_route_trip_tools_pics_fill_trips($time_tables_inbound),
      'outbound' => it_route_trip_tools_pics_fill_trips($time_tables_outbound),
    ],
  ];
  return $data;
}

function it_route_trip_tools_pics_fill_trips($time_tables) {
  $full_trip = [];
  foreach ($time_tables as $stop) {
    if (count($stop['trips']) > count($full_trip)) {
      $sorted_trips = $stop['trips'];
      uasort($sorted_trips, function($a, $b) {
        return strtotime($a['departure_time']) - strtotime($b['departure_time']);
      });
      $full_trip = array_keys($sorted_trips);
    }
  }
  $return_tables = [];
  foreach ($time_tables as $id => $stop) {
    $return_tables[$id] = $stop;
    $return_tables[$id]['trips'] = [];
    foreach ($full_trip as $trip) {
      if (isset($stop['trips'][$trip])) {
        $return_tables[$id]['trips'][$trip] = $stop['trips'][$trip];
      } else {
        $return_tables[$id]['trips'][$trip] = [
          'departure_time' => '',
        ];
      }
    }
  }
  return $return_tables;

}

function it_route_trip_tools_build_route_title($routeId, $date = NULL) {
  $routes = it_route_trip_tools_pics_get_route_data($routeId, $date, 0, TRUE);
  $date = \Drupal::request()->query->get('date');
  $date = empty($date) ? date('Y-m-d') : $date;
  return isset($routes['Route']) ? $routes['Route']['RouteInfo']['route_short_name'] . ' - ' . $routes['Route']['RouteInfo']['route_long_name'] : '';
}

function it_route_trip_tools_pics_get_routes_raw($cache_only = TRUE) {
  // https://pics.intercitytransit.com/api/calendar_dates
  $cid = 'calendar_dates_routes';
  $cache_service = \Drupal::service('it_route_trip_tools.transit_data_cache');
  
  if ($cache = $cache_service->get($cid)) {
    return $cache;
  }
  if ($cache_only) {
    return [];
  }

  $client = \Drupal::httpClient();
  try {
    $response = $client->get('https://pics.intercitytransit.com/api/calendar_dates', [
      'timeout' => 15,
    ]);
    $data = json_decode($response->getBody()->getContents(), TRUE);
    $routes = $data['routes'] ?? [];
    // Cache for 24 hours.
    $cache_service->set($cid, $routes, \Drupal::time()->getRequestTime() + 60 * 60 * 24 * 365);
    return $routes;
  } catch (\Exception $e) {
    \Drupal::logger('it_route_trip_tools')->error($e->getMessage());
    return [];
  }
}

function it_route_trip_tools_pics_get_routes() {
  $routes = it_route_trip_tools_pics_get_routes_raw();
  $disable_routes = array_keys(\Drupal::config('it_route_trip_tools.settings')->get('disable_routes') ?: []);
  foreach ($disable_routes as $route_id) {
    unset($routes[$route_id]);
  }
  return $routes;
}

function it_route_trip_tools_pics_get_dates($cache_only = TRUE) {
  // https://pics.intercitytransit.com/api/calendar_dates
  $cid = 'calendar_dates_dates';
  $cache_service = \Drupal::service('it_route_trip_tools.transit_data_cache');

  if ($cache = $cache_service->get($cid)) {
    return $cache;
  }
  if ($cache_only) {
    return [];
  }
  
  $client = \Drupal::httpClient();
  try {
    $response = $client->get('https://pics.intercitytransit.com/api/calendar_dates', [
      'timeout' => 15,
    ]);
    $data = json_decode($response->getBody()->getContents(), TRUE);
    $dates = $data['dates'] ?? [];
    // Cache for 24 hours.
    $cache_service->set($cid, $dates, \Drupal::time()->getRequestTime() + 60 * 60 * 24 * 365);
    return $dates;
  } catch (\Exception $e) {
    \Drupal::logger('it_route_trip_tools')->error($e->getMessage());
    return [];
  }
}

function it_route_trip_tools_pics_get_route_data_by_id($route_id, $date = NULL, $direction_id = 0, $cache_only = TRUE) {
  // https://pics.intercitytransit.com/api/calendar_dates
  $date = empty($date) ? date('Y-m-d') : $date;
  $cid = 'route_data:' . $date . ':' . $route_id . ':' . $direction_id;
  $cache_service = \Drupal::service('it_route_trip_tools.transit_data_cache');

  if ($cache = $cache_service->get($cid)) {
    return $cache;
  }
  if ($cache_only) {
    return [];
  }

  $client = \Drupal::httpClient();
  $dates = it_route_trip_tools_pics_get_dates();
  $date_info = $dates[$date] ?? [];
  $schedule_id = $date_info['schedule_id'] ?? '101';
  $service_ids = $date_info['service_ids'] ?? [10];
  try {
    $response = $client->get('https://pics.intercitytransit.com/api/stop_times?date='.$date.'&route_id='.$route_id.'&schedule_id='.$schedule_id.'&service_ids%5B%5D='.implode(',', $service_ids).'&direction_id='.$direction_id, [
      'timeout' => 15,
    ]);
    $data = Json::decode($response->getBody()->getContents());
    $routes_data = isset($data['status']) && $data['status'] == 'success' ? $data['data'] : [];
    // Cache for 24 hours.
    $cache_service->set($cid, $routes_data, \Drupal::time()->getRequestTime() + 60 * 60 * 24 * 365);
    return $routes_data;
  } catch (\Exception $e) {
    \Drupal::logger('it_route_trip_tools')->error($e->getMessage());
    return [];
  }
}

function it_route_trip_tools_pics_get_route_data($route_id, $date = NULL, $direction_id = 0, $cache_only = TRUE) {
  $routes = it_route_trip_tools_pics_get_route_data_by_id($route_id, $date, $direction_id, $cache_only);
  $disable_routes = array_keys(\Drupal::config('it_route_trip_tools.settings')->get('disable_routes') ?: []);
  if (in_array((int) $route_id, $disable_routes)) {
    return [];
  }
  return $routes;
}

function it_route_trip_tools_pics_get_all_routes_data($date = NULL, $direction_id = 0, $cache_only = TRUE) {
  $routes = it_route_trip_tools_pics_get_routes();
  $disable_routes = array_keys(\Drupal::config('it_route_trip_tools.settings')->get('disable_routes') ?: []);

  $all_routes_data = [];
  foreach ($routes as $id => $route) {
    if (in_array((int) $id, $disable_routes)) {
      continue;
    }
    $route_data = it_route_trip_tools_pics_get_route_data($id, $date, $direction_id, $cache_only);
    $all_routes_data[$route['route_short_name']] = $route_data;
  }
  return $all_routes_data;
}
