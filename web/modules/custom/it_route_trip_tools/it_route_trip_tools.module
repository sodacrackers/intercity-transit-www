<?php

use Drupal\Core\Form\FormStateInterface;
use GuzzleHttp\Client;
use Drupal\Component\Serialization\Json;
use Drupal\Core\Config\ConfigFactoryInterface;
use Drupal\Core\Form\ConfigFormBase;


/**
 * Implements hook_theme().
 */
function it_route_trip_tools_theme($existing, $type, $theme, $path) {
  return [
    'it_route_trip_tools_legend_calendar_block_table' => [
      'variables' => [
        'headers' => NULL,
        'rows' => NULL,
      ],
      'template' => 'legend-calendar-block-table',
    ],
		'admin_form' => [
			'render element' => 'form',
			'template' => 'forms/admin-form'
		],
		'admin_form_page' => [
			'variables' => [
				'admin_form' => array()
			],
			'template' => 'pages/admin-form-page'
		],
		'stops_page' => [
			'variables' => [
				'stop_data' => array(),
				'stop_id' => ''
			],
			'template' => 'pages/stops-page'
		],
		'routes_page' => [
			'template' => 'pages/routes-page',
			'variables' => [
				'route_id' => NULL,
				'route_short_name' => NULL,
				'routes_options' => array(),
				'route_list' => array(),
				'routes_map_weekdays' => array(),
        'routes_table_weekdays' => array(),
        'route_data_weekdays' => array(),
				'all_routes_map_data' => '',
        'download_url' => '',
			],
		],
		'routes_form' => [
			'variables' => array(
				'form' => NULL,
				'route_data' => array()
			),
			'template' => 'forms/routes-form'
		],
		'routes_map' => [
			'variables' => array (
				'route_data' => array(),
        'day' => NULL,
			),
			'template' => 'components/routes-map'
		],
		'routes_table' => [
			'variables' => array (
				'route_data' => array(),
			),
			'template' => 'components/routes-table'
		],
		'trip_planner_page' => [
			'template' => 'pages/trip-planner-page',
			'variables' => [
				'trip_data' => array()
			],
		],
		'trip_form_block' => [
			'template' => 'blocks/trip-form-block',
			'variables' => [
				'trip_form' => array(),
				'trip_planner_path' => '',
			],
		],
		'stops_form_block' => [
			'template' => 'blocks/stops-form-block',
			'variables' => [
				'stops_form' => array(),
				'stop_id' => '',
				'stop_options' => array(),
				'stops_path' => ''
			],
		],
		'routes_form_block' => [
			'template' => 'blocks/routes-form-block',
			'variables' => [
				'routes_form' => array()
			],
		],
		'routes_media_block' => [
			'template' => 'blocks/routes-media-block',
			'variables' => [
				'route_id' => array(),
				'route_table_url' => '',
				'route_map_url' => ''
			],
		],
		'route_trip_tools_form_block' => [
			'template' => 'blocks/route-trip-tools-form-block',
			'variables' => [
				'trip_form_block' => NULL,
				'stops_form_block' => NULL,
				'routes_form_block' => NULL,
				'routes_media_block' => NULL,
				'route_param' => array(),
				'trip_planner_path' => '',
				'routes_path' => '',
				'stops_path' => '',
				'current_page' => '',
				'route_id' => ''
			],
		],
        /** new templates */
        'routes_header_block' => [
            'template' => 'blocks/routes-header-block',
            'variables' => [
                'routes_options' => [],
                'additional_blocks' => [
                    [
                        'title' => t('Service Alerts'),
                        'link' => [
                            'title' => 'View Alerts',
                            'mobile_title' => 'View Alerts',
                            'url' => '/rider-alerts'
                        ],
                        'color' => '#6CACDE',
                    ],
                    [
                        'title' => t('Planning a Trip?'),
                        'link' => [
                            'title' => 'Go to Trip Planner',
                            'mobile_title' => 'Trip Planner',
                            'url' => '/plan-your-trip/trip-planner'
                        ],
                        'color' => '#33957F',
                    ],
                    [
                        'title' => t('Stops and Stations'),
                        'link' => [
                            'title' => 'Find a Stop',
                            'mobile_title' => 'View Stops',
                            'url' => '/stops'
                        ],
                        'color' => '#003087',
                    ],
                ],
            ],
        ],
        'routes_new_page' => [
            'template' => 'pages/routes-new-page',
            'variables' => [
                'routes_options' => [],
                'alert_options' => [],
                'alert_view_all_link' => ''
            ],
        ]
	];
}

/*
	Implements hook_page_attachments
*/
function it_route_trip_tools_page_attachments(array &$attachments) {
	$config = \Drupal::service('config.factory')->getEditable('it_route_trip_tools.settings');
	$routes_path = $config->get('route_page_path');
	$attachments['#attached']['library'][] = 'it_route_trip_tools/global';
	$attachments['#attached']['drupalSettings']['it_route_trip_tools']['routes_path'] = $routes_path;
}

/**
 * Implements hook_theme_suggestions_alter
 */
function it_route_trip_tools_theme_suggestions_alter(array &$suggestions, array $variables) {
	if (isset($variables['element']) && isset($variables['element']['#type']) && $variables['element']['#type'] == 'form') {
		$original_theme_hook = $variables['theme_hook_original'];
		$suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#id']);
	}
	return $suggestions;
}

/**
 * Implements hook_theme_registry_alter().
 */
function it_route_trip_tools_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['node_add_list'])) {
    $theme_registry['node_add_list']['template'] = 'node-add-list--ict';
    $theme_registry['node_add_list']['theme path'] = 'modules/custom/it_route_trip_tools';
    $theme_registry['node_add_list']['path'] = 'modules/custom/it_route_trip_tools/templates';
  }
}

/*
	Only used for basic request
	Mostly the route form select list
*/
function it_route_trip_tools_get_api_data($data, $apiId) {
	//Set the cache data
	$json = &drupal_static(__FUNCTION__);
	$hash = md5($data);
	$cid = $apiId . '_' . $hash . ':' . \Drupal::languageManager()->getCurrentLanguage()->getId();

	//Check if the cache exists
	if ($cache = \Drupal::cache()->get($cid)):
		$json = $cache->data;

	//If not, build it
	else:
		$api_data = file_get_contents($data);
		$json = json_decode($api_data, TRUE);
    $expire = \Drupal::service('datetime.time')->getRequestTime() + (60 * 60 * 24); // 1 day cache.
    \Drupal::cache()->set($cid, $json, $expire);
	endif;
	return $json;

}


function it_route_trip_get_stop_markers($stop_times) {
  $res = [];
  foreach ($stop_times as $stop_time) {
    $res[$stop_time['stop_id'].'-'.$stop_time['stop_sequence']]['stop_data'] = [
      'stopSequence' => $stop_time['stop_sequence'],
      'stopId' => $stop_time['stop_id'],
      'stopName' => $stop_time['name'],
      'stopLat' => $stop_time['lat'],
      'stopLon' => $stop_time['lon'],
      'timepoint' => $stop_time['timepoint']
    ];
    $res[$stop_time['stop_id'].'-'.$stop_time['stop_sequence']]['stop_times'][] = $stop_time['arrival_time'];
  }
  uasort($res, function ($a, $b) {
    return $a['stop_data']['stopSequence'] != $b['stop_data']['stopSequence'] ? (int) $a['stop_data']['stopSequence'] - (int) $b['stop_data']['stopSequence'] : (int) $a['stop_data']['stopId'] - (int) $b['stop_data']['stopId'];
  });
  return $res;
}

function it_route_trip_get_times_alt($stop_times, $trips) {
  if (count($stop_times) == 0) {
    return [];
  }
  $trips = array_values($trips);
  $middle_index = floor((count($trips) - 1) / 2);
  $central_trip = $trips[$middle_index];
  $ideal_trip = [];
  foreach ($stop_times as $stop_time) {
    if (in_array($stop_time['trip_id'], $central_trip)) {
      if (isset($ideal_trip[$stop_time['name']])) {
        $last = end($ideal_trip);
        $ideal_trip[$stop_time['name'] . ' '] = $last + 1;
      }
      else {
        $ideal_trip[$stop_time['name']] = (int) $stop_time['stop_sequence'];
      }
    }
  }
  asort($ideal_trip);
  $res = [];
  $counts = [];
  foreach ($stop_times as $stop_time) {
    $counts[$stop_time['name']] = isset($counts[$stop_time['name']]) ? $counts[$stop_time['name']] + 1 : 1;
  }
  $top = max($counts);
  $half_top = ($top / 2);
  if (in_array($half_top, $counts)) {
    $top = $half_top;
  }
  $stops_elaborated_by_trip = [];
  foreach ($stop_times as $stop_time) {
    $index = $ideal_trip[$stop_time['name']];
    if (isset($res['stops'][$index][$stop_time['timepoint'] == 1 ? 'timepoint' : 'not-timepoint'][$stop_time['name']]) && $top == count($res['stops'][$index][$stop_time['timepoint'] == 1 ? 'timepoint' : 'not-timepoint'][$stop_time['name']]) && isset($ideal_trip[$stop_time['name'] . ' '])) {
      $index = $ideal_trip[$stop_time['name'] . ' '];
    }
    if (in_array($stop_time['name'], $stops_elaborated_by_trip[$stop_time['trip_id']] ?? [])) {
      $index = $ideal_trip[$stop_time['name'] . ' '];
    }
    $formatted = str_pad(substr($stop_time['arrival_time'], 0, strlen($stop_time['arrival_time']) - 3), 5, '0', STR_PAD_LEFT);
    if (isset($res['stops'][$index][$stop_time['timepoint'] == 1 ? 'timepoint' : 'not-timepoint'][$stop_time['name']]) && $top == count($res['stops'][$index][$stop_time['timepoint'] == 1 ? 'timepoint' : 'not-timepoint'][$stop_time['name']])) {
      $res['stops'][$index + 1]['stop_id'] = $stop_time['stop_id'];
      $res['stops'][$index + 1]['stop_sequence'] = $stop_time['stop_sequence'];
      $res['stops'][$index + 1][$stop_time['timepoint'] == 1 ? 'timepoint' : 'not-timepoint'][$stop_time['name']][] = $formatted;
      usort($res['stops'][$index + 1][$stop_time['timepoint'] == 1 ? 'timepoint' : 'not-timepoint'][$stop_time['name']], function ($a, $b) {
        return strtotime($a) - strtotime($b);
      });
    }
    else {
      $res['stops'][$index]['stop_id'] = $stop_time['stop_id'];
      $res['stops'][$index]['stop_sequence'] = $stop_time['stop_sequence'];
      $res['stops'][$index][$stop_time['timepoint'] == 1 ? 'timepoint' : 'not-timepoint'][$stop_time['name']][] = $formatted;
      usort($res['stops'][$index][$stop_time['timepoint'] == 1 ? 'timepoint' : 'not-timepoint'][$stop_time['name']], function ($a, $b) {
        return strtotime($a) - strtotime($b);
      });
    }
    if (isset($stops_elaborated_by_trip[$stop_time['trip_id']][$stop_time['name']])) {
      $stops_elaborated_by_trip[$stop_time['trip_id']][$stop_time['name'] . ' '] = $stop_time['name'] . ' ';
    } else {
      $stops_elaborated_by_trip[$stop_time['trip_id']][$stop_time['name']] = $stop_time['name'];
    }
  }
  foreach ($res['stops'] as &$stop) {
    $type = array_keys($stop)[2]; 
    $name = array_keys($stop[$type])[0];
    if (count($stop[$type][$name]) < $top) {
      $stop[$type][$name] = array_pad($stop[$type][$name], -($top), NULL);
    }
  }

  ksort($res['stops']);
  $res['trip_count'] = count($res['stops']);
  return $res;
}

function it_route_trip_get_trips($stop_times, $replace_id = TRUE) {
  $res = [];
  foreach ($stop_times as $stop_time) {
    if (empty($res[$stop_time['trip_id']])) {
      $res[$stop_time['trip_id']] = [
        'tripId' => $stop_time['trip_id'],
        'tripStartTime' => it_route_trip_format_time($stop_time['departure_time']),
        'tripEndTime' => '',
        'shapeId' => (int) $stop_time['shape_id'],
        'stopTimes' => [],
      ];
    }
    $res[$stop_time['trip_id']]['stopTimes'][] = [
      'stopSequence' =>  (int) $stop_time['stop_sequence'],
      'stopId' =>  (int) $stop_time['stop_id'],
      'stopName' => $stop_time['name'],
      'departureTime' =>  it_route_trip_format_time($stop_time['departure_time']),
      'timepoint' =>  (int) $stop_time['timepoint'],
    ];
    $res[$stop_time['trip_id']]['tripEndTime'] = it_route_trip_format_time($stop_time['departure_time']);
  }
  if ($replace_id) {
    $trips = array_values($res);
    foreach ($trips as $delta => &$trip) {
      $trip['tripId'] = $delta;
    }
  }
  else {
    $trips = $res;
  }
  return $trips;
}

function it_route_trip_format_time($time) {
  $time_no_sec = substr($time, 0, strlen($time) - 3);
  $hours = (int) explode(':', $time_no_sec)[0];
  return $time_no_sec . ($hours > 11 ? ' pm' : ' am');
}

function it_route_trip_tools_get_min($shapes, $key) {
  $val = 999;
  foreach ($shapes as $coord) {
    if ($coord[$key] < $val) {
      $val = $coord[$key];
    }
  }
  return $val;
}

function it_route_trip_tools_get_max($shapes, $key) {
  $val = -999;
  foreach ($shapes as $coord) {
    if ($coord[$key] > $val) {
      $val = $coord[$key];
    }
  }
  return $val;
}

function it_route_trip_tools_get_center($boundaries) {
  return [
    'lat' => ((float) $boundaries['max']['lat'] + (float) $boundaries['min']['lat']) / 2,
    'lng' => ((float) $boundaries['max']['lng'] + (float) $boundaries['min']['lng']) / 2,
  ];
}

function it_route_trip_tools_get_stop_options() {
  // ICTSD-129
  return [];
  $stops = \Drupal::service('ict.gtfs')->getStaticData('stops');
  $headers = array_shift($stops);
  if (empty($headers)) {
    return [];
  }
  $id_index = array_search('stop_id', $headers);
  $name_index = array_search('stop_name', $headers);
  $lat_index = array_search('stop_lat', $headers);
  $lon_index = array_search('stop_lon', $headers);
  $organized_stops = array_map(function ($item) use ($id_index, $name_index, $lat_index, $lon_index){
    return [
      'stop_id' => empty($item[$id_index]) ? '' : $item[$id_index],
      'stop_name' => empty($item[$name_index]) ? '' : $item[$name_index],
      'stop_lat' => empty($item[$lat_index]) ? '' : $item[$lat_index],
      'stop_lon' => empty($item[$lon_index]) ? '' : $item[$lon_index],
    ];
  }, $stops);
  usort($organized_stops, function ($a, $b) {
    return (int) $a['stop_id'] - (int) $b['stop_id'];
  });
  return $organized_stops;
}

function it_route_trip_tools_get_stop_details($stop_id) {
  // Get the stop by ID.
  // ICTSD-129
  return [];
  $shapes = \Drupal::service('ict.gtfs')->getStaticData('shapes');
  $headers = array_shift($shapes);
  $shape_index = array_search('shape_id', $headers);
  $shape_pt_sequence_index = array_search('shape_pt_sequence', $headers);
  $shape_pt_lat_index = array_search('shape_pt_lat', $headers);
  $shape_pt_lon_index = array_search('shape_pt_lon', $headers);
  $stops = \Drupal::service('ict.gtfs')->getStaticData('stops');
  $headers = array_shift($stops);
  $id_index = array_search('stop_id', $headers);
  $name_index = array_search('stop_name', $headers);
  $lat_index = array_search('stop_lat', $headers);
  $lon_index = array_search('stop_lon', $headers);
  $is_timepoint = NULL;
  $stop = array_reduce($stops, function ($carry, $item) use ($stop_id, $id_index) {
    return $item[$id_index] === $stop_id ? $item : $carry;
  });
  // Get the stop times by the loaded stop, and collect trip ids.
  $stop_times = \Drupal::service('ict.gtfs')->getStaticData('stop_times');
  $headers = array_shift($stop_times);
  $stop_id_index = array_search('stop_id', $headers);
  $stop_trip_id_index = array_search('trip_id', $headers);
  $timepoint_index = array_search('timepoint', $headers);
  $arrival_time_index = array_search('arrival_time', $headers);
  $trip_ids = [];
  $filtered_stop_times = array_filter($stop_times, function ($item) use ($stop_id_index, $stop_id) {
    return isset($item[$stop_id_index]) && $item[$stop_id_index] == $stop_id;
  });
  // Filter trip ids and use them to collect routes.
  foreach ($filtered_stop_times as $filtered_stop_time) {
    $trip_ids[$filtered_stop_time[$stop_trip_id_index]] = $filtered_stop_time;
    if ($filtered_stop_time[$timepoint_index] === '1') {
      $is_timepoint = TRUE;
    }
  }
  $trips = \Drupal::service('ict.gtfs')->getStaticData('trips');
  $headers = array_shift($trips);
  $trip_id_index = array_search('trip_id', $headers);
  $route_id_index = array_search('route_id', $headers);
  $service_type_index = array_search('service_id', $headers);
  $shape_id_index = array_search('shape_id', $headers);
  $route_ids = [];
  $filtered_trips = array_filter($trips, function ($item) use ($trip_ids, $trip_id_index) {
    return isset($item[$trip_id_index]) && array_key_exists($item[$trip_id_index], $trip_ids);
  });
  $all_routes = \Drupal::service('ict.gtfs')->getStaticData('routes');
  $headers = array_shift($all_routes);
  $all_routes_id_index = array_search('route_id', $headers);
  $all_routes_long_name_index = array_search('route_long_name', $headers);
  foreach ($filtered_trips as $filtered_trip) {
    $route_id = $filtered_trip[$route_id_index];
    $trip_id = $filtered_trip[$trip_id_index];
    $shape_id = $filtered_trip[$shape_id_index];
    if (!isset($route_ids[$route_id])) {
      $actual_route = array_reduce($all_routes, function ($carry, $item) use ($route_id, $all_routes_id_index) {
        return $item[$all_routes_id_index] == $route_id ? $item : $carry;
      });
      $first_shape_items = array_filter($shapes, function ($item) use ($shape_id, $shape_index) {
        return $item[$shape_index] == $shape_id;
      });
      $route_ids[$route_id] = [
        "routeShortName" => $route_id,
        "routeLongName" => $actual_route[$all_routes_long_name_index],
        "schedule" => [
          0 => [
            'scheduleId' => '1.0',
            'stopTimes' => [],
          ],
          1 => [
            'scheduleId' => '2.0',
            'stopTimes' => [],
          ],
        ],
        "shape" => [
          "shapeId" => $shape_id,
          "shapeData" => array_map(function ($item) use ($shape_pt_sequence_index, $shape_pt_lat_index, $shape_pt_lon_index) {
            return [
              "shape_pt_sequence" => (int) $item[$shape_pt_sequence_index],
              "shape_pt_lat" => (float) $item[$shape_pt_lat_index],
              "shape_pt_lon" => (float) $item[$shape_pt_lon_index],
            ];
          }, array_values($first_shape_items)),
        ],
      ];
    }
    $new_st = (int) $filtered_trip[$service_type_index] - 2;
    $one_stop_time = array_filter($filtered_stop_times, function ($item) use ($stop_trip_id_index, $trip_id) {
      return $item[$stop_trip_id_index] == $trip_id;
    });
    $route_ids[$route_id]['schedule'][$new_st]['stopTimes'][] = [
      "departureTime" => [
        "date" => date('Y-m-d') . " " .  reset($one_stop_time)[$arrival_time_index] . ".000000",
        "timezone_type" => 3,
        "timezone" => "America/Los_Angeles",
      ]
    ];
  }
  ksort($route_ids);
  return [
    "stopId" => $stop_id,
    "stopName" => $stop[$name_index],
    "stopLat" => (float) $stop[$lat_index],
    "stopLon" => (float) $stop[$lon_index],
    "timepoint" => $is_timepoint,
    "routes" => array_values($route_ids),
  ];
}

/*

	The data built here is used for the map and table for a returned route.

*/
function it_route_trip_tools_get_route_table_map_data($routeId, $date = NULL) {
  $date = empty($date) ? date('Y-m-d') : $date;
  $inbound_data = it_route_trip_tools_pics_get_route_data($routeId, $date, 0);
  $outbound_data = it_route_trip_tools_pics_get_route_data($routeId, $date, 1);
  $shapes_inbound = reset($inbound_data['Route']['MapInfo']['Shapes'][0]);
  $shapes_outbound = reset($outbound_data['Route']['MapInfo']['Shapes'][1]);
  $stop_markers_inbound = $inbound_data['Route']['MapInfo']['Stops'][0];
  $stop_markers_outbound = $outbound_data['Route']['MapInfo']['Stops'][1];
  $time_tables_inbound = $inbound_data['Route']['StopTimesTables'][0];
  $time_tables_outbound = $outbound_data['Route']['StopTimesTables'][1];
  $inbound_label = $inbound_data['Route']['Directions'][1];
  $outbound_label = $outbound_data['Route']['Directions'][0];
  // $trips_inbound = \Drupal::service('ict.gtfs')->getTripsByRouteAndDirection($routeId, 1, $serv);
  // $trips_outbound = \Drupal::service('ict.gtfs')->getTripsByRouteAndDirection($routeId, 0, $serv);
  // $active_config = \Drupal::service('ict.gtfs')->getActiveConfiguration();

  $short_name = $inbound_data['Route']['RouteInfo']['route_short_name'];
  $long_name = $inbound_data['Route']['RouteInfo']['route_long_name'];

  $bounding = [
    'min' => [
      'lat' => it_route_trip_tools_get_min($shapes_inbound, 'shape_pt_lat'),
      'lng' => it_route_trip_tools_get_min($shapes_inbound, 'shape_pt_lon'),
    ],
    'max' => [
      'lat' => it_route_trip_tools_get_max($shapes_inbound, 'shape_pt_lat'),
      'lng' => it_route_trip_tools_get_max($shapes_inbound, 'shape_pt_lon'),
    ],
  ];
  $data = [
    'short_name' => $short_name,
    'long_name' => $long_name,
    'map_type' => 'roadmap',
    'bounding' => $bounding,
    'center' => it_route_trip_tools_get_center($bounding),
    'inbound_shapes' => $shapes_inbound,
    'outbound_shapes' => $shapes_outbound,
    'inbound_label' => $inbound_label,
    'outbound_label' => $outbound_label,
    'stop_markers' => [
      'inbound' => $stop_markers_inbound,
      'outbound' => $stop_markers_outbound,
    ],
    'time_tables' => [
      'inbound' => $time_tables_inbound,
      'outbound' => $time_tables_outbound,
    ],
  ];

  return $data;

}


/*
	Not used at the moment
*/
function it_route_trip_tools_get_stop_data($stopId) {
    $client = \Drupal::service('http_client_factory')->fromOptions([
      'base_uri' => 'https://gtfs.intercitytransit.com/',
    ]);
    $response = $client->get('stopdata.php', [
      'query' => [
        'stopId' => $stopId,
      ]
    ]);
    $stops_array = Json::decode($response->getBody());
    $stops = [];
    foreach ($stops_array as $stop) {
      $stops[] = $stop['routes'];
    }
    return $stops;
}

/*
	Build the select list for the routes form
	Uses it_route_trip_tools_get_api_data()
*/
function it_route_trip_tools_build_routes_options($filter_disabled = FALSE) {
  // ICTSD-129
  return [];
  $routes = \Drupal::service('ict.gtfs')->getStaticData('routes');
  $headers = array_shift($routes);
  if (empty($headers)) {
    return [];
  }
  $id_index = array_search('route_id', $headers);
  $name_index = array_search('route_long_name', $headers);
  $short_name_index = array_search('route_short_name', $headers);
  $sort_index = array_search('route_sort_order', $headers);
  $res = [];
  foreach ($routes as $id => $route) {
    if (count($route) > 1) {
      $sort_key = (int) $route[$sort_index];
      $long_name = $route[$name_index];
      $short_name = $route[$short_name_index];
      $res[$sort_key][$route[$id_index]] = str_contains($long_name, '-') ? $long_name : $short_name . '-' . $long_name;
    }
  }
  ksort($res);
  $final = [];
  foreach ($res as $sort => $route) {
    $route_id = array_keys($route)[0];
    $final[$route_id] = $route[$route_id];
  }
  if ($filter_disabled) {
    $disabled_routes = \Drupal::config('ict_gtfs.settings')->get('disable_routes');
    $disabled_routes = array_filter($disabled_routes ?: []);
    $final = array_diff_key($final, $disabled_routes);
  }
  return $final;
}


function it_route_trip_tools_build_route_title($routeId) {
  $routes = it_route_trip_tools_pics_get_route_data($routeId);
  $date = \Drupal::request()->query->get('date');
  $date = empty($date) ? date('Y-m-d') : $date;
  return $routes['Route']['RouteInfo']['route_short_name'] . ' - ' . $routes['Route']['RouteInfo']['route_long_name'] . ' (' . $date . ')';
}

function it_route_trip_tools_build_stop_title($stopId) {
  // ICTSD-129
  return [];
  $stops = \Drupal::service('ict.gtfs')->getStaticData('stops');
  foreach ($stops as $stop) {
    if ($stop[0] == $stopId) {
      return $stop[2];
    }
  }
  return '';
}

/*
	Builds the request data to pass to it_route_trip_tools_get_route_table_map_data
	Requires $routeId, $serv and $dir to be set
	All values try to pull from the routes form
	The form requires all fields to have values
	There are conditionals in place in case someone visits from a link
*/
function it_route_trip_tools_get_route_data($routeId = NULL) {

	//Check if a service_option value was sent
	if (\Drupal::request()->request->get('service_option')):
		$serv = \Drupal::request()->request->get('service_option');
	//If not, set it to 1
	else:
		$serv = '1';
	endif;
	//Check if a route_direction value was sent
	if (\Drupal::request()->request->get('route_direction')):
		$dir = 'Outbound';
		//$dir = \Drupal::request()->request->get('route_direction');
	//If not, set it to Inbound
	else:
		$dir = 'Outbound';
	endif;
	//Make sure $routeId is not empty or set to all
	if ($routeId != '' && $routeId != 'all'):
		//Set the route data using it_route_trip_tools_get_route_table_map_data()
		$route_data = it_route_trip_tools_get_route_table_map_data($routeId, $serv, $dir);
		return $route_data;
	endif;
}

function it_route_trip_tools_preprocess_html(&$vars) {
	//$vars['#attached']['library'][] = 'it_route_trip_tools/trip-planner';
    if (\Drupal::service('path.matcher')->isFrontPage()):
        //$vars['#attached']['library'][] = 'it_route_trip_tools/trip-planner-front-page';
    endif;
}

function it_route_trip_tools_pics_get_routes() {
  // https://pics.intercitytransit.com/api/calendar_dates
  $cid = 'calendar_dates_routes';
  if ($cache = \Drupal::cache()->get($cid)) {
    return $cache->data;
  }
  $client = \Drupal::httpClient();
  try {
    $response = $client->get('https://pics.intercitytransit.com/api/calendar_dates');
    $data = json_decode($response->getBody()->getContents(), TRUE);
    $routes = $data['routes'] ?? [];
    // Cache for 24 hours.
    \Drupal::cache()->set($cid, $routes, \Drupal::time()->getRequestTime() + 60 * 60 * 24);
    return $routes;
  } catch (\Exception $e) {
    \Drupal::logger('it_route_trip_tools')->error($e->getMessage());
    return [];
  }
}
function it_route_trip_tools_pics_get_dates() {
  // https://pics.intercitytransit.com/api/calendar_dates
  $cid = 'calendar_dates_dates';
  if ($cache = \Drupal::cache()->get($cid)) {
    return $cache->data;
  }
  $client = \Drupal::httpClient();
  try {
    $response = $client->get('https://pics.intercitytransit.com/api/calendar_dates');
    $data = json_decode($response->getBody()->getContents(), TRUE);
    $dates = $data['dates'] ?? [];
    // Cache for 24 hours.
    \Drupal::cache()->set($cid, $dates, \Drupal::time()->getRequestTime() + 60 * 60 * 24);
    return $dates;
  } catch (\Exception $e) {
    \Drupal::logger('it_route_trip_tools')->error($e->getMessage());
    return [];
  }
}

/**
 * Get GTFS-Realtime alerts entities from the API.
 * Similar to it_route_trip_tools_pics_get_dates but for GTFS-Realtime alerts.
 *
 * @return array
 *   The entities array from the GTFS-Realtime alerts API.
 */
function it_route_trip_tools_pics_get_alerts() {
  // Cache ID for the alerts entities
  $cid = 'gtfs_realtime_alerts_entities';
  
  // Check if cached data exists
  if ($cache = \Drupal::cache()->get($cid)) {
    return $cache->data;
  }
  
  // Create HTTP client
  $client = \Drupal::httpClient();
  
  try {
    // Fetch data from the GTFS-Realtime alerts API
    $response = $client->get('https://its.rideralerts.com/InfoPoint/GTFS-Realtime.ashx', [
      'query' => [
        'Type' => 'Alert',
        'debug' => 'true',
      ],
    ]);
    
    // Decode the JSON response
    $data = Json::decode($response->getBody()->getContents());
    
    // Extract the Entities attribute
    $entities = $data['Entities'] ?? [];
    
    // Cache for 5 minutes (alerts should be more frequently updated than calendar dates)
    \Drupal::cache()->set($cid, $entities, \Drupal::time()->getRequestTime() + 60 * 5);
    
    return $entities;
  } 
  catch (\Exception $e) {
    // Log any errors
    \Drupal::logger('it_route_trip_tools')->error('Failed to fetch GTFS-Realtime alerts: @message', [
      '@message' => $e->getMessage(),
    ]);
    return [];
  }
}

function it_route_trip_tools_pics_get_route_data($route_id, $date = NULL, $direction_id = 0) {
  // https://pics.intercitytransit.com/api/calendar_dates
  $date = empty($date) ? date('Y-m-d') : $date;
  $cid = 'route_data:' . $date . ':' . $route_id;
  if ($cache = \Drupal::cache()->get($cid)) {
    return $cache->data;
  }
  $client = \Drupal::httpClient();
  $dates = it_route_trip_tools_pics_get_dates();
  $date_info = $dates[$date] ?? [];
  $schedule_id = $date_info['schedule_id'] ?? '101';
  $service_ids = $date_info['service_ids'] ?? [10];
  try {
    $response = $client->get('https://pics.intercitytransit.com/api/stop_times?date='.date('Y-m-d').'&route_id='.$route_id.'&schedule_id='.$schedule_id.'&service_ids%5B%5D='.implode(',', $service_ids).'&direction_id='.$direction_id);
    $data = Json::decode($response->getBody()->getContents());
    $routes_data = $data['status'] == 'success' ? $data['data'] : [];
    // Cache for 24 hours.
    \Drupal::cache()->set($cid, $routes_data, \Drupal::time()->getRequestTime() + 60 * 60 * 24);
    return $routes_data;
  } catch (\Exception $e) {
    \Drupal::logger('it_route_trip_tools')->error($e->getMessage());
    return [];
  }
}

function it_route_trip_tools_pics_get_all_routes_data() {
  $routes = it_route_trip_tools_pics_get_routes();
  $all_routes_data = [];
  foreach ($routes as $id => $route) {
    $route_data = it_route_trip_tools_pics_get_route_data($id);
    $all_routes_data[$route['route_short_name']] = $route_data;
  }
  return $all_routes_data;
}